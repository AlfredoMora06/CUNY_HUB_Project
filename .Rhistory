print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
x <- c(1, 0, 1, 10, 11, 11, 0) # our data set
mean.result = mean(x) # calculate mean
print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
x <- c(4, 4, 4, 4) # our data set
mean.result = mean(x) # calculate mean
print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
x <- c(1, 24, 5, 16, 21, 7, 20, 1, 9, 20,
19, 10, 23, 16, 0, 4, 9, 13, 17, 13, 0,
2, 12, 11, 7, 1, 19, 9, 12, 18, 5, 21, 30,
15, 4, 2, 12, 11, 10, 13, 11, 3, 6, 10, 13, 16
12, 28, 19, 12, 20, 3, 11) # our data set
x <- c(1, 24, 5, 16, 21, 7, 20, 1, 9, 20, 19, 10, 23, 16, 0, 4, 9, 13, 17, 13, 0, 2, 12, 11, 7, 1, 19, 9, 12, 18, 5, 21, 30, 15, 4, 2, 12, 11, 10, 13, 11, 3, 6, 10, 13, 16, 12, 28, 19, 12, 20, 3, 11) # our data set
mean.result = mean(x) # calculate mean
print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
x <- c(4, 11, 18, 11, 9, 6, 5, 11, 9, 12, 7, 5, 7,
3, 11, 1, 9, 11, 10, 7, 8, 9, 10, 7, 11, 4,
13, 5, 4, 7, 8, 3, 8, 15, 9, 16, 10, 0, 7,
15, 13, 9, 2, 13, 10)
mean.result = mean(x) # calculate mean
print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
#integer
x <- 2L
typeof(x)
#double
y <- 2.5
typeof(y)
#complex
z <- 3 + 2i
typeof(z)
#characher
a <- "h"
typeof(a)
#character
q1 <- T
typeof(q1)
pnorm(2, mean=0, sd=1, lower.tail = F)
pnorm(-2, mean=0, sd=1, upper.tail = F)
pnorm(-2, mean=0, sd=1, lower.tail = F)
x <- pnorm(-2, mean=0, sd=1, lower.tail = F)
print(1-x)
x <- pnorm(-1.96, mean=0, sd=1, lower.tail = F)
print(1-x)
print(x)
x <- pnorm(0, mean=0, sd=1, lower.tail = F)
print(x)
x <- pnorm(-0.5, mean = 0, sd = 1, lower.tail = F)
print(1-x)
x <- pnorm(-1.96, mean = 0, sd = 1, lower.tail = F)
print(1-x)
# insert data set inside the parenthesis
x <- c(11, 2, 2, 1, 9) # our data set
mean.result = mean(x) # calculate mean
print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
# insert data set inside the parenthesis
x <- c(22, 9, 21, 15) # our data set
mean.result = mean(x) # calculate mean
print (mean.result)
variance.result = var(x) # calculate variance
print (variance.result)
sd.result = sqrt(var(x)) # calculate standard deviation
print (sd.result)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui=ui, server=server)
install.packages("shiny")
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui=ui, server=server)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/ClassAssignments/Class-16-Excs-5.33/JBEANS.Rdata")
View(JEANS)
View(JEANS)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Projects/Project_2/TRUCKING.Rdata")
View(TRUCKING)
str(TRUCKING)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/EXECSAL.Rdata")
View(EXECSAL)
library(MASS)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
full.model
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
install.packages("leaps")
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "seqrep")
install.packages("leaps")
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "seqrep")
install.packages("leaps")
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "seqrep")
install.packages("caret")
library(caret)
install.packages("lattice")
library(lattice)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library(leaps)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "seqrep")
summary(models)
install.packages("caret")
library(caret)
install.packages("lattice")
library(lattice)
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
install.packages("lattice")
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model$results
step.model$bestTune
summary(step.model$finalModel)
coef(step.model$finalModel, 4)
lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality,
data = swiss)
library(MASS)
res.lm <- lm(Fertility ~., data = swiss)
step <- stepAIC(res.lm, direction = "both", trace = FALSE)
step
# Train the model
step.model <- train(Fertility ~., data = swiss,
method = "lmStepAIC",
trControl = train.control,
trace = FALSE
)
# Model accuracy
step.model$results
# Final model coefficients
step.model$finalModel
# Summary of the model
summary(step.model$finalModel)
library(MASS)
# Fit the full model
full.model <- lm(Fertility ~., data = swiss)
full.model
summary(full.model)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
models <- regsubsets(Fertility~., data = swiss, nvmax = 5,
method = "seqrep")
summary(models)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/EXEXSAL2.Rdata")
View(EXEXSAL2)
names(EXEXSAL2)
library(MASS)
library(leaps)
Model1<-lm(Y ~ ., data = EXEXSAL2)
summary(Model1)
modelsBoth <- regsubsets(Y ~ . , data = EXEXSAL2, nvmax = 5, method = "seqrep")
summary(modelsBoth)
modelsF <- regsubsets(Y ~ ., data = EXEXSAL2, nvmax = 5, method = "forward")
summary(modelsF)
modelsBack <- regsubsets(Y ~ ., data = EXEXSAL2,nvmax = 5, method = "backward")
summary(modelsBack)
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("lattice")
library(lattice)
install.packages("lattice")
# Set seed for reproducibility
set.seed(123)
# Set up repeated k-fold cross-validation
train.control <- trainControl(method = "cv", number = 10)
# Train the model
step.model3 <- train(Y~., data = EXEXSAL2,
method = "leapBackward",
tuneGrid = data.frame(nvmax = 1:5),
trControl = train.control
)
step.model3$results
step.model3$bestTune
summary(step.model3$finalModel)
coef(step.model3$finalModel, 4)
coef(step.model3$finalModel, 5)
BestModels1 <- lm(Y ~ X1 + X2 +X3 + X4 +X5,data = EXEXSAL2)
summary(BestModels1)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/CLERICAL.Rdata")
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/GASTURBINE.Rdata")
View(CLERICAL)
View(CLERICAL)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/BIDMAINT.Rdata")
View(BIDMAINT)
str(BIDMAINT)
install.packages("RDocumentation")
install.packages("fastDummies")
library(fastDummies)
results <- dummy_columns(BIDMAINT)
results
knitr::kable(results)
model <- lm(results$COST ~ results$X1 + results$X2)
summary(model)
confint(model)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/DIESEL.Rdata")
View(DIESEL)
results1 <-dummy_columns(DIESEL)
knitr::kable(results1)
results1
# Building the model with no interactions
model1 <-lm(results1$PERFORM ~results1$FUEL + results1$BRAND)
summary(model1)
predict(model1, DIESEL, se.fit = FALSE, scale =NULL, df =INf,
interval = c("confidence"),
level = 0.95, type = c("response"))
#Building the model with interactions
model2 <- lm(results1$PERFORM ~ results1$FUEL + results1$BRAND
+ results1$FUEL*results1$BRAND)
summary(model2)
predict(model2, DIESEL, se.fit = TRUE, scale =NULL, df =INf,
interval = c("confidence"),
level = 0.95, type = c("response"))
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/EXEXSAL2.Rdata")
View(EXEXSAL2)
names(EXEXSAL2)
library(MASS)
library(leaps)
Model1<-lm(Y ~ ., data = EXEXSAL2)
summary(Model1)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/GASTURBINE.Rdata")
View(GASTURBINE)
str(GASTURBINE)
new.gasturbine <- dummy_columns(GASTURBINE)
new.gasturbine
modelsBoth <- regsubsets(HEATRATE ~ . , data = GASTURBINE, nvmax = 7, method = "seqrep")
summary(modelsBoth)
modelsF <- regsubsets(HEATRATE ~ ., data = GASTURBINE, nvmax = 7, method = "forward")
summary(modelsF)
modelsBack <- regsubsets(hEATRATE ~ ., data = GASTURBINE,nvmax = 7, method = "backward")
modelsBack <- regsubsets(HEATRATE ~ ., data = GASTURBINE,nvmax = 7, method = "backward")
summary(modelsBack)
# View open dataset
View(mtcars)
# Install development version from GitHub
# install.packages("devtools")
devtools::install_github("rsquaredacademy/olsrr")
install.packages("olsrr")
library(olsrr)
#Fit the model
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
#Fit the model
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
ols_step_all_possible(model)
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
k <-ols_step_all_possible(model)
plot(k)
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
ols_step_best_subset(model)
#The plot method shows the panel of fit criteria for best subset regression methods.
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
k <-ols_step_best_subset(model)
plot(k)
model <- lm(y ~ ., data = surgical)
model <- lm(y ~ ., data = surgical)
ols_step_forward_p(model)
#plots
model <- lm(y ~ ., data = surgical)
k <- ols_step_forward_p(model)
plot(k)
# Detailed stepwise forward regression
model <- lm(y ~ ., data = surgical)
ols_step_forward_p(model, details = TRUE)
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/EXECSAL2.Rdata")
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/EXECSAL2.Rdata")
load("EXECSAL2.Rdata")
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Exercises&Examples/EXEXSAL2.Rdata")
head(EXEXSAL2)
str(EXEXSAL2)
# Install development version from GitHub
# install.packages("devtools")
devtools::install_github("rsquaredacademy/olsrr")
View(mtcars)
head(EXEXSAL2)
#Fit the model
model<- lm(Y ~ X1+ X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = EXEXSAL2)
ols_step_all_possible(model)
k <-ols_step_all_possible(model)
plot(k)
ols_step_all_possible(model)
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
k <-ols_step_all_possible(model)
plot(k)
model<- lm(Y ~ X1+ X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10, data = EXEXSAL2)
ols_step_best_subset(model)
k <-ols_step_best_subset(model)
plot(k)
View(GASTURBINE)
?plot
?plot()
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
k <-ols_step_all_possible(model)
plot(k, col='red')
#The plot method shows the panel of fit criteria for best subset regression methods.
model<- lm(mpg ~ disp + hp + wt + qsec, data = mtcars)
k <-ols_step_best_subset(model)
plot(k, col='red')
library(car)
detach("package:carData", unload = TRUE)
detach("package:car", unload = TRUE)
library(car)
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(dplyr)
gapminder
filter(year==2007)
gapminder %>%
filter(year==2007)
gapminder %>%
filter(country=="United States")
gapminder %>%
filter(country=="United States", year=1957)
gapminder %>%
filter(country=="United States", year==1957)
gapminder %>%
arrange(gdpPercap)
gapminder %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(year==2007) %>%
arrange(desc(gdpPercap))
gapminder %>%
filter(country=="Turkey")
gapminder %>%
mutate(gdp = gdpPercap * pop)
gapminder
gapminder %>%
filter(year==2007) %>%
mutate(lifeExpMonths = lifeExp * 12) %>%
arrange(desc(lifeExpMonths))
?anova()
View(train.control)
reg <- function(x) {
yint<- 12.134
shift <- 0.76*x
curve <- 0.086*x*x
return(yint-shift+curve)
}
reg(1)
reg(6)
reg(4.5)
dereg <- function(x) {
return((11.037)-(0.7696*x)+(0.086*x*x))
}
dereg(1)
dereg <- function(x) {
yint<- 11.037
shift <- 0.7696*x
curve <- 0.086*x*x
return(yint-shift+curve)
}
dereg(1)
reg(1)
diff <- function(x) {
yint <- 1.155
slope <- (0.0096*x)
return(yint-slope)
}
diff(8)
diff(1)
x <- seq(0.25, 6, 0.25)
plot(x, reg(x),
main = "Plot of PREDICT vs DISTANCE",
ylab = "Predicted LN(PRICE)",
ylim = range(9:12),
type = "o",
pch = "o",
col = "darkmagenta",
lty = 1)
points(x, dereg(x), col = "darkgreen", pch = "*")
lines(x, dereg(x), col = "darkgreen", lty = 2)
lines(x, diff(x), col = "blue", lty = 3)
plot(x, reg(x),
main = "Plot of PREDICT vs DISTANCE",
ylab = "Predicted LN(PRICE)",
ylim = range(1:12),
type = "o",
pch = "o",
col = "darkmagenta",
lty = 1)
points(x, dereg(x), col = "darkgreen", pch = "*")
lines(x, dereg(x), col = "darkgreen", lty = 2)
lines(x, diff(x), col = "blue", lty = 3)
legend("topright", c("regulated", "deregulated", "difference"),
fill = c("darkmagenta", "darkgreen", "blue"))
load("/Users/nursimadonuk/Desktop/fall_2020/STAT214/Data/R/Cases/TRUCKING4.Rdata")
View(TRUCKING4)
library(readr)
contact <- read_csv("Desktop/CUNY_HUB_Project/data/contact.csv")
View(contact)
library(readr)
courses <- read_csv("Desktop/CUNY_HUB_Project/data/courses.csv")
View(courses)
library(readr)
degrees <- read_csv("Desktop/CUNY_HUB_Project/data/degrees.csv")
View(degrees)
library(readr)
departments <- read_csv("Desktop/CUNY_HUB_Project/data/departments.csv")
View(departments)
library(readr)
depsTaught <- read_csv("Desktop/CUNY_HUB_Project/data/depsTaught.csv")
View(depsTaught)
library(readr)
expenses <- read_csv("Desktop/CUNY_HUB_Project/data/expenses.csv")
View(expenses)
library(readr)
extra <- read_csv("Desktop/CUNY_HUB_Project/data/extra.csv")
View(extra)
library(readr)
faculty <- read_csv("Desktop/CUNY_HUB_Project/data/faculty.csv")
View(faculty)
library(readr)
honors <- read_csv("Desktop/CUNY_HUB_Project/data/honors.csv")
View(honors)
install_github("easyGgplot2", "kassambara")
library(ggplot2)
library(devtools)
shiny::runApp('Desktop/CUNY_HUB_Project')
runApp('Desktop/CUNY_HUB_Project')
runApp()
runApp('Desktop/CUNY_HUB_Project')
runApp('Desktop/CUNY_HUB_Project')
prac <- "hello there"
prac[1]
runApp('Desktop/CUNY_HUB_Project')
runApp('Desktop/CUNY_HUB_Project')
runApp('Desktop/CUNY_HUB_Project')
for(vec in contact) {print("hi")}
View(expenses)
View(expenses)
View(courses)
View(courses)
View(departments)
runApp('Desktop/CUNY_HUB_Project')
View(departments)
View(depsTaught)
View(faculty)
View(extra)
View(degrees)
runApp('Desktop/CUNY_HUB_Project')
View(contact)
runApp('Desktop/CUNY_HUB_Project')
runApp('Desktop/CUNY_HUB_Project')
runApp('Desktop/CUNY_HUB_Project')
View(courses)
View(courses)
View(degrees)
View(degrees)
View(expenses)
View(expenses)
View(extra)
View(extra)
View(honors)
View(honors)
View(contact)
View(contact)
View(degrees)
View(degrees)
View(departments)
View(departments)
View(depsTaught)
View(depsTaught)
View(faculty)
View(faculty)
View(courses)
View(courses)
runApp('Desktop/CUNY_HUB_Project')
